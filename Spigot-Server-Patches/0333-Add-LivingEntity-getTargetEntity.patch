From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <Blake.Galbreath@GMail.com>
Date: Sat, 22 Sep 2018 00:33:08 -0500
Subject: [PATCH] Add LivingEntity#getTargetEntity


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e7b5b27872689fdbb6d874be951806140a3055a5..9d7cb21744e44909187c62c94ba2a623c961f414 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1506,6 +1506,7 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
         return this.calculateViewVector(pitch - 90.0F, yaw);
     }
 
+    public final Vec3 getEyePosition(float partialTicks) { return getEyePosition(partialTicks); } // Paper - OBFHELPER
     public final Vec3 getEyePosition(float tickDelta) {
         if (tickDelta == 1.0F) {
             return new Vec3(this.getX(), this.getEyeY(), this.getZ());
@@ -2151,6 +2152,7 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
         return this.getPassengers().size() < 1;
     }
 
+    public final float getCollisionBorderSize() { return getPickRadius(); } // Paper - OBFHELPER
     public float getPickRadius() {
         return 0.0F;
     }
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index 5f4439d7204dd3aa164ed68f2fe31260b516be75..5edee56ae4eb3d0fde7a4d1d80a1ea1da5874733 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -23,6 +23,7 @@ public final class EntitySelector {
     public static final Predicate<Entity> NO_CREATIVE_OR_SPECTATOR = (entity) -> {
         return !(entity instanceof Player) || !entity.isSpectator() && !((Player) entity).isCreative();
     };
+    public static Predicate<Entity> canAITarget() { return ATTACK_ALLOWED; } // Paper - OBFHELPER
     public static final Predicate<Entity> ATTACK_ALLOWED = (entity) -> {
         return !(entity instanceof Player) || !entity.isSpectator() && !((Player) entity).isCreative() && entity.level.getDifficulty() != Difficulty.PEACEFUL;
     };
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b36701216688dd183d745750897c4ba0bb59484b..59d0a13b51b609a520763f3a3ed429a81b3d8d6e 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -108,6 +108,7 @@ import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
@@ -3616,6 +3617,37 @@ public abstract class LivingEntity extends Entity {
         return level.clip(raytrace);
     }
 
+    public EntityHitResult getTargetEntity(int maxDistance) {
+        if (maxDistance < 1 || maxDistance > 120) {
+            throw new IllegalArgumentException("maxDistance must be between 1-120");
+        }
+
+        Vec3 start = this.getEyePosition(1.0F);
+        Vec3 direction = this.getLookAngle();
+        Vec3 end = start.add(direction.x * maxDistance, direction.y * maxDistance, direction.z * maxDistance);
+
+        List<Entity> entityList = level.getEntities(this, getBoundingBox().expand(direction.x * maxDistance, direction.y * maxDistance, direction.z * maxDistance).inflate(1.0D, 1.0D, 1.0D), EntitySelector.canAITarget().and(Entity::isPickable));
+
+        double distance = 0.0D;
+        EntityHitResult result = null;
+
+        for (Entity entity : entityList) {
+            AABB aabb = entity.getBoundingBox().grow((double) entity.getCollisionBorderSize());
+            Optional<Vec3> rayTraceResult = aabb.calculateIntercept(start, end);
+
+            if (rayTraceResult.isPresent()) {
+                Vec3 rayTrace = rayTraceResult.get();
+                double distanceTo = start.distanceToSqr(rayTrace);
+                if (distanceTo < distance || distance == 0.0D) {
+                    result = new EntityHitResult(entity, rayTrace);
+                    distance = distanceTo;
+                }
+            }
+        }
+
+        return result;
+    }
+
     public int shieldBlockingDelay = level.paperConfig.shieldBlockingDelay;
 
     public int getShieldBlockingDelay() {
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index c932b4f049afeb14ac55410479a4c92b87573035..95c037a21a3180eac88ca6a4ae3c00fb83c7c6cd 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -122,6 +122,7 @@ public class AABB {
         return this.expandTowards(scale.x, scale.y, scale.z);
     }
 
+    public final AABB expand(double x, double y, double z) { return expandTowards(x, y, z); } // Paper - OBFHELPER
     public AABB expandTowards(double x, double y, double z) {
         double d = this.minX;
         double e = this.minY;
@@ -150,6 +151,12 @@ public class AABB {
         return new AABB(d, e, f, g, h, i);
     }
 
+    // Paper start
+    public AABB grow(double d0) {
+        return inflate(d0, d0, d0);
+    }
+    // Paper end
+
     public AABB inflate(double x, double y, double z) {
         double d = this.minX - x;
         double e = this.minY - y;
@@ -206,6 +213,7 @@ public class AABB {
         return this.minX < maxX && this.maxX > minX && this.minY < maxY && this.maxY > minY && this.minZ < maxZ && this.maxZ > minZ;
     }
 
+    public final boolean contains(Vec3 vec3d) { return contains(vec3d); } // Paper - OBFHELPER
     public boolean contains(Vec3 vec) {
         return this.contains(vec.x, vec.y, vec.z);
     }
@@ -238,6 +246,7 @@ public class AABB {
         return this.inflate(-value);
     }
 
+    public final Optional<Vec3> calculateIntercept(Vec3 vec3d, Vec3 vec3d1) { return clip(vec3d, vec3d1); } // Paper - OBFHELPER
     public Optional<Vec3> clip(Vec3 min, Vec3 max) {
         double[] ds = new double[]{1.0D};
         double d = max.x - min.x;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 37b8c7b82c188838df6a47756d9fadf35f8af779..158defa558a0eff545b9dcc33874117a74258cf4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -209,6 +209,33 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
             new com.destroystokyo.paper.block.TargetBlockInfo(org.bukkit.craftbukkit.block.CraftBlock.at(getHandle().level, ((net.minecraft.world.phys.BlockHitResult)rayTrace).getBlockPos()),
                 net.minecraft.server.MCUtil.toBukkitBlockFace(((net.minecraft.world.phys.BlockHitResult)rayTrace).getDirection()));
     }
+
+    public Entity getTargetEntity(int maxDistance, boolean ignoreBlocks) {
+        net.minecraft.world.phys.EntityHitResult rayTrace = rayTraceEntity(maxDistance, ignoreBlocks);
+        return rayTrace == null ? null : rayTrace.getEntity().getBukkitEntity();
+    }
+
+    public com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(int maxDistance, boolean ignoreBlocks) {
+        net.minecraft.world.phys.EntityHitResult rayTrace = rayTraceEntity(maxDistance, ignoreBlocks);
+        return rayTrace == null ? null : new com.destroystokyo.paper.entity.TargetEntityInfo(rayTrace.getEntity().getBukkitEntity(), new org.bukkit.util.Vector(rayTrace.getLocation().x, rayTrace.getLocation().y, rayTrace.getLocation().z));
+    }
+
+    public net.minecraft.world.phys.EntityHitResult rayTraceEntity(int maxDistance, boolean ignoreBlocks) {
+        net.minecraft.world.phys.EntityHitResult rayTrace = getHandle().getTargetEntity(maxDistance);
+        if (rayTrace == null) {
+            return null;
+        }
+        if (!ignoreBlocks) {
+            net.minecraft.world.phys.HitResult rayTraceBlocks = getHandle().getRayTrace(maxDistance, net.minecraft.world.level.ClipContext.Fluid.NONE);
+            if (rayTraceBlocks != null) {
+                net.minecraft.world.phys.Vec3 eye = getHandle().getEyePosition(1.0F);
+                if (eye.distanceToSqr(rayTraceBlocks.getLocation()) <= eye.distanceToSqr(rayTrace.getLocation())) {
+                    return null;
+                }
+            }
+        }
+        return rayTrace;
+    }
     // Paper end
 
     @Override
