From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 26 Aug 2018 20:49:50 -0400
Subject: [PATCH] Optimize RegistryMaterials

Use larger initial sizes to increase bucket capacity on the BiMap

BiMap.get was seen to be using a good bit of CPU time.

diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index aa9c039e28381ccada781b5f5b6f7cab1d515d3f..903442deb62ba454258446196f5f6ddbac9e0374 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -30,6 +30,7 @@ import net.minecraft.Util;
 import net.minecraft.resources.RegistryDataPackCodec;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap; // Paper
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -37,7 +38,7 @@ import org.apache.logging.log4j.Logger;
 public class MappedRegistry<T> extends WritableRegistry<T> {
     protected static final Logger LOGGER = LogManager.getLogger();
     private final ObjectList<T> byId = new ObjectArrayList<>(256);
-    private final Object2IntMap<T> toId = new Object2IntOpenCustomHashMap<>(Util.identityStrategy());
+    private final Reference2IntOpenHashMap<T> toId = new Reference2IntOpenHashMap<T>(2048);// Paper - use bigger expected size to reduce collisions and direct intent for FastUtil to be identity map
     private final BiMap<ResourceLocation, T> storage;
     private final BiMap<ResourceKey<T>, T> keyStorage;
     private final Map<T, Lifecycle> lifecycles;
@@ -48,9 +49,9 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
     public MappedRegistry(ResourceKey<? extends Registry<T>> resourceKey, Lifecycle lifecycle) {
         super(resourceKey, lifecycle);
         this.toId.defaultReturnValue(-1);
-        this.storage = HashBiMap.create();
-        this.keyStorage = HashBiMap.create();
-        this.lifecycles = Maps.newIdentityHashMap();
+        this.storage = HashBiMap.create(2048); // Paper - use bigger expected size to reduce collisions
+        this.keyStorage = HashBiMap.create(2048); // Paper - use bigger expected size to reduce collisions
+        this.lifecycles = new java.util.IdentityHashMap<>(2048); // Paper - use bigger expected size to reduce collisions
         this.elementsLifecycle = lifecycle;
     }
 
