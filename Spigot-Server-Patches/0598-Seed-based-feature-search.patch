From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Mon, 13 Jan 2020 15:40:32 +0100
Subject: [PATCH] Seed based feature search

This tries to work around the issue where the server will load
surrounding chunks up to a radius of 100 chunks in order to search for
features e.g. when running the /locate command or for treasure maps
(issue #2312).
This is done by backporting Mojang's change in 1.17 which makes it so
that the biome (generated by the seed) is checked first if the feature
can be generated before actually to load the chunk.

The only downside of this is that it breaks once the seed or generator
changes but this should usually not happen. A config option to disable
this improvement is added though in case that should ever be necessary.

diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 9a0ade5875c34487a65f82f9380f9d25b4432586..ff0e4447b6574e91bf8815de4e04ce881ed7026d 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -331,6 +331,12 @@ public class PaperWorldConfig {
         }
     }
 
+    public boolean seedBasedFeatureSearch = true;
+    private void seedBasedFeatureSearch() {
+        seedBasedFeatureSearch = getBoolean("seed-based-feature-search", seedBasedFeatureSearch);
+        log("Feature search is based on seed: " + seedBasedFeatureSearch);
+    }
+
     public int maxCollisionsPerEntity;
     private void maxEntityCollision() {
         maxCollisionsPerEntity = getInt( "max-entity-collisions", this.spigotConfig.getInt("max-entity-collisions", 8) );
diff --git a/src/main/java/net/minecraft/world/level/ChunkPos.java b/src/main/java/net/minecraft/world/level/ChunkPos.java
index f5db58f629a4a41eb568f9c9a6ee218dc8e56d15..fa14113945fb7351a845f8d3f333184cc0f8b5d5 100644
--- a/src/main/java/net/minecraft/world/level/ChunkPos.java
+++ b/src/main/java/net/minecraft/world/level/ChunkPos.java
@@ -65,10 +65,12 @@ public class ChunkPos {
         }
     }
 
+    public int getBlockX() { return getMinBlockX(); } // Paper - OBFHELPER
     public int getMinBlockX() {
         return this.x << 4;
     }
 
+    public int getBlockZ() { return getMinBlockZ(); } // Paper - OBFHELPER
     public int getMinBlockZ() {
         return this.z << 4;
     }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 3a351939c8bbd9f12c6ece2d4e87792790fa14a3..0928394d6b65057cd3af9d7943427ff0f00fac88 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1511,7 +1511,6 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.profiler;
     }
 
-    @Override
     public BiomeManager getBiomeManager() {
         return this.biomeManager;
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
index 457ed3c8a3233b381d791d7e20b3b0c376001647..fd0444cb524214c0ace6ecf7754f4eebfdfefe26 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/StructureFeature.java
@@ -167,6 +167,14 @@ public abstract class StructureFeature<C extends FeatureConfiguration> {
                         int p = k + i * n;
                         ChunkPos chunkPos = this.getPotentialFeatureChunk(config, worldSeed, worldgenRandom, o, p);
                         if (!world.getWorldBorder().isWithinBounds(chunkPos)) { continue; } // Paper
+                        // Paper start - seed based feature search
+                        if (structureAccessor.getWorld().paperConfig.seedBasedFeatureSearch) {
+                            Biome biomeBase = structureAccessor.getWorld().getBiomeManager().getBiome(new BlockPos(chunkPos.getBlockX() + 9, 0, chunkPos.getBlockZ() + 9));
+                            if (!biomeBase.getGenerationSettings().isValidStart(this)) {
+                                continue;
+                            }
+                        }
+                        // Paper end
                         ChunkAccess chunkAccess = world.getChunk(chunkPos.x, chunkPos.z, ChunkStatus.STRUCTURE_STARTS);
                         StructureStart<?> structureStart = structureAccessor.getStartForFeature(SectionPos.of(chunkAccess.getPos(), 0), this, chunkAccess);
                         if (structureStart != null && structureStart.isValid()) {
