From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 30 Mar 2016 19:36:20 -0400
Subject: [PATCH] MC Dev fixes


diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 81a5f08a0a5170e5b204287a6728e12ccdd1dd2f..77073df9ee2755b99dfc50eeba46219ea7d9fa4c 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -263,7 +263,7 @@ public class Util {
     }
 
     public static <K> Strategy<K> identityStrategy() {
-        return Util.IdentityStrategy.INSTANCE;
+        return (Strategy<K>) Util.IdentityStrategy.INSTANCE; // Paper - decompile fix
     }
 
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<? extends V>> futures) {
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index a7f69e1c403151e6d2c021c0d1a979e312b7b3f1..057e59de135fca979e770fe4aa458d03dc13edc0 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -21,7 +21,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
             return i;
         } else {
             int j = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-            return j != 0 ? j : this.type.getComparator().compare(this.key, ticket.key);
+            return j != 0 ? j : this.type.getComparator().compare(this.key, (T)ticket.key); // Paper - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/SortedArraySet.java b/src/main/java/net/minecraft/util/SortedArraySet.java
index d5fd509ed6aa509103a40bc37dd9241666edc1c3..346e5cb0aee92f3310a87ab83844347eabed0b5b 100644
--- a/src/main/java/net/minecraft/util/SortedArraySet.java
+++ b/src/main/java/net/minecraft/util/SortedArraySet.java
@@ -22,7 +22,7 @@ public class SortedArraySet<T> extends AbstractSet<T> {
     }
 
     public static <T extends Comparable<T>> SortedArraySet<T> create(int initialCapacity) {
-        return new SortedArraySet<>(initialCapacity, Comparator.naturalOrder());
+        return new SortedArraySet<>(initialCapacity, (Comparator)Comparator.naturalOrder()); // Paper - decompile fix
     }
 
     private static <T> T[] castRawArray(Object[] array) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 9733a2aa80c79cf11d2ef7c8c296b50b842b6769..4f04cf38b0c507decaabc1334bbd4d89ab2317f2 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -74,9 +74,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             }
         }
 
-        this.recipes = (Map) map1.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> {
-            return (entry1.getValue()); // CraftBukkit
-        }));
+        this.recipes = map1.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue)); // CraftBukkit // Paper - fix verify error
         RecipeManager.LOGGER.info("Loaded {} recipes", map1.size());
     }
 
diff --git a/src/main/java/net/minecraft/world/level/TickNextTickData.java b/src/main/java/net/minecraft/world/level/TickNextTickData.java
index c6daebb8ec7f503301f6423789a4a31e5f947c1c..8c7844326146f3a973a740d6224c4e8eeb748ce4 100644
--- a/src/main/java/net/minecraft/world/level/TickNextTickData.java
+++ b/src/main/java/net/minecraft/world/level/TickNextTickData.java
@@ -39,7 +39,7 @@ public class TickNextTickData<T> {
     }
 
     public static <T> Comparator<TickNextTickData<T>> createTimeComparator() {
-        return Comparator.comparingLong((tickNextTickData) -> {
+        return Comparator.<TickNextTickData<T>>comparingLong((tickNextTickData) -> { // Paper - decompile fix
             return tickNextTickData.triggerTick;
         }).thenComparing((tickNextTickData) -> {
             return tickNextTickData.priority;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
index 746bdd1cca7f3b257ebef10d2f0a17a1e146ed93..17717a10985a54b152959e0f2896078d3c11f4e5 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
@@ -42,7 +42,7 @@ public abstract class LootPoolEntryContainer implements ComposableEntryContainer
 
         // CraftBukkit start
         @Override
-        public final void serialize(JsonObject json, T entry, JsonSerializationContext context) {
+        public void serialize(JsonObject json, T entry, JsonSerializationContext context) { // Paper - remove final
             if (!org.apache.commons.lang3.ArrayUtils.isEmpty(entry.conditions)) {
                 json.add("conditions", context.serialize(entry.conditions));
             }
