From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew Steinborn <git@steinborn.me>
Date: Mon, 23 Jul 2018 13:08:19 -0400
Subject: [PATCH] Optimize RegistryID.c()

This is a frequent hotspot for world loading/saving.

diff --git a/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java b/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
index 5b935c01c191956842dfcf6fd18c722f02ba2bdc..ddddefac5782d8e44f81ea7387223ba66348f34b 100644
--- a/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
+++ b/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
@@ -14,12 +14,14 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K> {
     private K[] byId;
     private int nextId;
     private int size;
+    private java.util.BitSet usedIds; // Paper
 
     public CrudeIncrementalIntIdentityHashBiMap(int size) {
         size = (int)((float)size / 0.8F);
         this.keys = (K[])(new Object[size]);
         this.values = new int[size];
         this.byId = (K[])(new Object[size]);
+        this.usedIds = new java.util.BitSet(); // Paper
     }
 
     public int getId(@Nullable K object) {
@@ -42,9 +44,14 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K> {
     }
 
     private int nextId() {
+        // Paper start
+        /*
         while(this.nextId < this.byId.length && this.byId[this.nextId] != null) {
             ++this.nextId;
         }
+        */
+        this.nextId = this.usedIds.nextClearBit(0);
+        // Paper end
 
         return this.nextId;
     }
@@ -57,6 +64,7 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K> {
         this.byId = (K[])(new Object[newSize]);
         this.nextId = 0;
         this.size = 0;
+        this.usedIds.clear(); // Paper
 
         for(int i = 0; i < objects.length; ++i) {
             if (objects[i] != null) {
@@ -80,6 +88,7 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K> {
         this.keys[k] = value;
         this.values[k] = id;
         this.byId[id] = value;
+        this.usedIds.set(id); // Paper
         ++this.size;
         if (id == this.nextId) {
             ++this.nextId;
@@ -140,6 +149,7 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K> {
         Arrays.fill(this.byId, (Object)null);
         this.nextId = 0;
         this.size = 0;
+        this.usedIds.clear(); // Paper
     }
 
     public int size() {
