From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Sun, 23 Aug 2020 10:57:44 +0200
Subject: [PATCH] Fix MC-197271

This patch only fixes an issue for servers running OpenJ9.

diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
index 32eb9d9c3ac6fbba681d19d12373515616537468..2d55a4ba8828a25e248af6c40dbc83290eaf63c0 100644
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ b/src/main/java/net/minecraft/data/BuiltinRegistries.java
@@ -47,11 +47,11 @@ public class BuiltinRegistries {
     public static final Registry<StructureProcessorList> PROCESSOR_LIST = registerSimple(Registry.PROCESSOR_LIST_REGISTRY, () -> {
         return ProcessorLists.ZOMBIE_PLAINS;
     });
-    public static final Registry<StructureTemplatePool> TEMPLATE_POOL = registerSimple(Registry.TEMPLATE_POOL_REGISTRY, Pools::bootstrap);
+    public static final Registry<StructureTemplatePool> TEMPLATE_POOL = registerSimple(Registry.TEMPLATE_POOL_REGISTRY, () -> Pools.bootstrap()); // Paper - MC-197271
     public static final Registry<Biome> BIOME = registerSimple(Registry.BIOME_REGISTRY, () -> {
         return Biomes.PLAINS;
     });
-    public static final Registry<NoiseGeneratorSettings> NOISE_GENERATOR_SETTINGS = registerSimple(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings::bootstrap);
+    public static final Registry<NoiseGeneratorSettings> NOISE_GENERATOR_SETTINGS = registerSimple(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, () -> NoiseGeneratorSettings.bootstrap()); // Paper - MC-197271
 
     private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> registryRef, Supplier<T> defaultValueSupplier) {
         return registerSimple(registryRef, Lifecycle.stable(), defaultValueSupplier);
@@ -64,8 +64,8 @@ public class BuiltinRegistries {
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> registryRef, R registry, Supplier<T> defaultValueSupplier, Lifecycle lifecycle) {
         ResourceLocation resourceLocation = registryRef.location();
         LOADERS.put(resourceLocation, defaultValueSupplier);
-        WritableRegistry<R> writableRegistry = WRITABLE_REGISTRY;
-        return writableRegistry.register(registryRef, registry, lifecycle);
+        WritableRegistry<R> writableRegistry = (WritableRegistry<R>) WRITABLE_REGISTRY; // Paper - decompile fix
+        return writableRegistry.register((ResourceKey<R>) registryRef, registry, lifecycle); // Paper - decompile fix
     }
 
     public static <T> T register(Registry<? super T> registry, String id, T object) {
@@ -73,11 +73,11 @@ public class BuiltinRegistries {
     }
 
     public static <V, T extends V> T register(Registry<V> registry, ResourceLocation id, T object) {
-        return ((WritableRegistry)registry).register(ResourceKey.create(registry.key(), id), object, Lifecycle.stable());
+        return (T) ((WritableRegistry)registry).register(ResourceKey.create(registry.key(), id), object, Lifecycle.stable()); // Paper - decompile fix
     }
 
     public static <V, T extends V> T registerMapping(Registry<V> registry, int rawId, ResourceKey<V> resourceKey, T object) {
-        return ((WritableRegistry)registry).registerMapping(rawId, resourceKey, object, Lifecycle.stable());
+        return (T) ((WritableRegistry)registry).registerMapping(rawId, resourceKey, object, Lifecycle.stable()); // Paper - decompile fix
     }
 
     public static void bootstrap() {
