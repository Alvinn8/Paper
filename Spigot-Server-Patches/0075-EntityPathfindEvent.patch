From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 28 Mar 2016 21:22:26 -0400
Subject: [PATCH] EntityPathfindEvent

Fires when an Entity decides to start moving to a location.

diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
index 2f56931f3559180cf3e132bd559446d0e641fc2d..0188b090820c83037f2d278b4e1034e61e566437 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
@@ -31,7 +31,7 @@ public class FlyingPathNavigation extends PathNavigation {
     }
 
     public Path createPath(Entity entity, int distance) {
-        return this.createPath(entity.blockPosition(), distance);
+        return this.createPath(entity.blockPosition(), entity, distance); // Paper - Forward target entity
     }
 
     public void tick() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
index 094e29a50055936335f1be937aed57c17579b79b..9fcc4d85989d5956f5769c81b051c0f702990b31 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
@@ -65,7 +65,7 @@ public class GroundPathNavigation extends PathNavigation {
     }
 
     public Path createPath(Entity entity, int distance) {
-        return this.createPath(entity.blockPosition(), distance);
+        return this.createPath(entity.blockPosition(), entity, distance); // Paper - Forward target entity
     }
 
     private int getSurfaceY() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index 5af32f66b1b3382bbd515d0b2e6fb35263056b5b..ee31638cfcc39d622e9f90e36ca684db377697c6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -9,6 +9,7 @@ import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Vec3i;
 import net.minecraft.network.protocol.game.DebugPackets;
+import net.minecraft.server.MCUtil;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Mob;
@@ -25,7 +26,7 @@ import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class PathNavigation {
-    protected final Mob mob;
+    protected final Mob mob; public Entity getEntity() { return mob; } // Paper - OBFHELPER
     protected final Level level;
     @Nullable
     protected Path path;
@@ -107,16 +108,26 @@ public abstract class PathNavigation {
 
     @Nullable
     public Path createPath(BlockPos target, int distance) {
-        return this.createPath(ImmutableSet.of(target), 8, false, distance);
+        // Paper start - add target parameter
+        return this.createPath(target, null, distance);
+    }
+    @Nullable public Path createPath(BlockPos targetPos, Entity target, int distance) {
+        return this.createPath(ImmutableSet.of(targetPos), target, 8, false, distance);
+        // Paper end
     }
 
     @Nullable
     public Path createPath(Entity entity, int distance) {
-        return this.createPath(ImmutableSet.of(entity.blockPosition()), 16, true, distance);
+        return this.createPath(ImmutableSet.of(entity.blockPosition()), entity, 16, true, distance); // Paper
     }
 
     @Nullable
-    protected Path createPath(Set<BlockPos> positions, int range, boolean bl, int distance) {
+    // Paper start - Add target
+    protected Path createPath(Set<BlockPos> positions, int range, boolean flag, int distance) {
+        return this.createPath(positions, null, range, flag, distance);
+    }
+    @Nullable protected Path createPath(Set<BlockPos> positions, Entity target, int range, boolean bl, int distance) {
+        // Paper end
         if (positions.isEmpty()) {
             return null;
         } else if (this.mob.getY() < 0.0D) {
@@ -126,6 +137,23 @@ public abstract class PathNavigation {
         } else if (this.path != null && !this.path.isDone() && positions.contains(this.targetPos)) {
             return this.path;
         } else {
+            // Paper start - Pathfind event
+            boolean copiedSet = false;
+            for (BlockPos possibleTarget : positions) {
+                if (!new com.destroystokyo.paper.event.entity.EntityPathfindEvent(getEntity().getBukkitEntity(),
+                    MCUtil.toLocation(getEntity().level, possibleTarget), target == null ? null : target.getBukkitEntity()).callEvent()) {
+                    if (!copiedSet) {
+                        copiedSet = true;
+                        positions = new java.util.HashSet<>(positions);
+                    }
+                    // note: since we copy the set this remove call is safe, since we're iterating over the old copy
+                    positions.remove(possibleTarget);
+                    if (positions.isEmpty()) {
+                        return null;
+                    }
+                }
+            }
+            // Paper end
             this.level.getProfiler().push("pathfind");
             float f = (float)this.mob.getAttributeValue(Attributes.FOLLOW_RANGE);
             BlockPos blockPos = bl ? this.mob.blockPosition().above() : this.mob.blockPosition();
