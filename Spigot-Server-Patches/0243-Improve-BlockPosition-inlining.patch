From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Wed, 30 Nov 2016 20:56:58 -0600
Subject: [PATCH] Improve BlockPosition inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This approach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my microbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 584dc7395210d7ddb328f9f9db2f957d783e2367..7bc0f13855293223c8070db5bb69b8a4e234666d 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -87,6 +87,7 @@ public class BlockPos extends Vec3i {
         return asLong(this.getX(), this.getY(), this.getZ());
     }
 
+    public static long asLong(int x, int y, int z) { return asLong(x, y, z); } // Paper - OBFHELPER
     public static long asLong(int x, int y, int z) {
         long l = 0L;
         l = l | ((long)x & PACKED_X_MASK) << X_OFFSET;
diff --git a/src/main/java/net/minecraft/core/Vec3i.java b/src/main/java/net/minecraft/core/Vec3i.java
index 21b672973285a0ff16b57c97bbe21ec4d0090ce4..ecf1c54b803959a41fcc14cd1eec0dc4349d79c7 100644
--- a/src/main/java/net/minecraft/core/Vec3i.java
+++ b/src/main/java/net/minecraft/core/Vec3i.java
@@ -41,7 +41,7 @@ public class Vec3i implements Comparable<Vec3i> {
     }
 
     @Override
-    public boolean equals(Object object) {
+    public final boolean equals(Object object) { // Paper
         if (this == object) {
             return true;
         } else if (!(object instanceof Vec3i)) {
@@ -59,7 +59,7 @@ public class Vec3i implements Comparable<Vec3i> {
     }
 
     @Override
-    public int hashCode() {
+    public final int hashCode() { // Paper
         return (this.getY() + this.getZ() * 31) * 31 + this.getX();
     }
 
@@ -72,15 +72,15 @@ public class Vec3i implements Comparable<Vec3i> {
         }
     }
 
-    public int getX() {
+    public final int getX() { // Paper
         return this.x;
     }
 
-    public int getY() {
+    public final int getY() { // Paper
         return this.y;
     }
 
-    public int getZ() {
+    public final int getZ() { // Paper
         return this.z;
     }
 
