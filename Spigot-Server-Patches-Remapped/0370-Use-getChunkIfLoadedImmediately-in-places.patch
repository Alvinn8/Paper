From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Mon, 8 Jul 2019 00:13:36 -0700
Subject: [PATCH] Use getChunkIfLoadedImmediately in places

This prevents us from hitting chunk loads for chunks at or less-than
ticket level 33 (yes getChunkIfLoaded will actually perform a chunk
load in that case).

diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index a24b355466eb9564877936f85b782d50da131574..3ce4056996f0ac9e91490c458bb2fede5254088e 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -201,7 +201,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
     }
 
     @Override public LevelChunk getChunkIfLoaded(int x, int z) { // Paper - this was added in world too but keeping here for NMS ABI
-        return this.chunkSource.getChunk(x, z, false);
+        return this.chunkSource.getChunkAtIfLoadedImmediately(x, z); // Paper
     }
 
     // Paper start - Asynchronous IO
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index ebfbf3648b9423b68f64a0d0a455ed03c81ea36e..6a7b1ea53655e4308e505f5092d002f16cafd47e 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1228,7 +1228,7 @@ public class ServerGamePacketListenerImpl implements ServerGamePacketListener {
                                 speed = player.abilities.walkingSpeed * 10f;
                             }
                             // Paper start - Prevent moving into unloaded chunks
-                            if (player.level.paperConfig.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && !worldserver.hasChunk((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4)) {
+                            if (player.level.paperConfig.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && worldserver.getChunkIfLoadedImmediately((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4) == null) { // Paper - use getIfLoadedImmediately
                                 this.internalTeleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.yRot, this.player.xRot, Collections.emptySet());
                                 return;
                             }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 1e69161c4597a7589bd67da633f4f4ef2ba3783a..b6bdea30e90d74cd361c7982162b61a46d187669 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -165,6 +165,13 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return (CraftServer) Bukkit.getServer();
     }
 
+    // Paper start
+    @Override
+    public boolean hasChunk(int chunkX, int chunkZ) {
+        return ((ServerLevel)this).getChunkIfLoaded(chunkX, chunkZ) != null;
+    }
+    // Paper end
+
     public ResourceKey<DimensionType> getTypeKey() {
         return typeKey;
     }
@@ -1063,14 +1070,14 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     public boolean isLoaded(BlockPos pos) {
-        return isOutsideBuildHeight(pos) ? false : this.getChunkSource().hasChunk(pos.getX() >> 4, pos.getZ() >> 4);
+        return isOutsideBuildHeight(pos) ? false : hasChunk(pos.getX() >> 4, pos.getZ() >> 4); // Paper
     }
 
     public boolean loadedAndEntityCanStandOnFace(BlockPos pos, Entity entity, Direction direction) {
         if (isOutsideBuildHeight(pos)) {
             return false;
         } else {
-            ChunkAccess ichunkaccess = this.getChunk(pos.getX() >> 4, pos.getZ() >> 4, ChunkStatus.FULL, false);
+            ChunkAccess ichunkaccess = this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4); // Paper
 
             return ichunkaccess == null ? false : ichunkaccess.getBlockState(pos).entityCanStandOnFace((BlockGetter) this, pos, entity, direction);
         }
@@ -1191,7 +1198,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
         for (int i1 = i; i1 < j; ++i1) {
             for (int j1 = k; j1 < l; ++j1) {
-                LevelChunk chunk = ichunkprovider.getChunkNow(i1, j1);
+                LevelChunk chunk = (LevelChunk)this.getChunkIfLoadedImmediately(i1, j1); // Paper
 
                 if (chunk != null) {
                     chunk.getEntitiesOfClass(oclass, axisalignedbb, list, predicate);
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 9dedd44aebb17f18985e1666e09ce863c7dd1a16..38d638e137cb4c0549206aa849ebe0b23ba7e58e 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -142,9 +142,10 @@ public class ActivationRange
             {
                 for ( int j1 = k; j1 <= l; ++j1 )
                 {
-                    if ( world.getWorld().isChunkLoaded( i1, j1 ) )
+                    LevelChunk chunk = (LevelChunk) world.getChunkIfLoadedImmediately( i1, j1 );
+                    if ( chunk != null )
                     {
-                        activateChunkEntities( world.getChunk( i1, j1 ) );
+                        activateChunkEntities( chunk );
                     }
                 }
             }
