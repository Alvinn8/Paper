From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 1 Mar 2016 23:52:34 -0600
Subject: [PATCH] Prevent tile entity and entity crashes


diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index e67cd1819847d76e27c1f9355e6ea3f05758e227..b1bba11bd7679ecdd3544b6f665b1996ee3d5d7e 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -738,11 +738,13 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
                         gameprofilerfiller.pop();
                     } catch (Throwable throwable) {
-                        CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
-                        CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Block entity being ticked");
-
-                        tileentity.fillCrashReportCategory(crashreportsystemdetails);
-                        throw new ReportedException(crashreport);
+                        // Paper start - Prevent tile entity and entity crashes
+                        System.err.println("TileEntity threw exception at " + tileentity.level.getWorld().getName() + ":" + tileentity.worldPosition.getX() + "," + tileentity.worldPosition.getY() + "," + tileentity.worldPosition.getZ());
+                        throwable.printStackTrace();
+                        tilesThisCycle--;
+                        this.tickableBlockEntities.remove(tileTickPosition--);
+                        continue;
+                        // Paper end
                     }
                     // Spigot start
                     finally {
@@ -808,11 +810,12 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         try {
             tickConsumer.accept(entity);
         } catch (Throwable throwable) {
-            CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking entity");
-            CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Entity being ticked");
-
-            entity.fillCrashReportCategory(crashreportsystemdetails);
-            throw new ReportedException(crashreport);
+            // Paper start - Prevent tile entity and entity crashes
+            System.err.println("Entity threw exception at " + entity.level.getWorld().getName() + ":" + entity.getX() + "," + entity.getY() + "," + entity.getZ());
+            throwable.printStackTrace();
+            entity.removed = true;
+            return;
+            // Paper end
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index fd601d46862c34d988644cad8bee316aee5cfe78..9fc5f77daacffc45e508d90088c657bc223666e8 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -207,7 +207,12 @@ public abstract class BlockEntity implements KeyedObject { // Paper
             return Registry.BLOCK_ENTITY_TYPE.getKey(this.getType()) + " // " + this.getClass().getCanonicalName();
         });
         if (this.level != null) {
-            CrashReportCategory.populateBlockDetails(crashreportsystemdetails, this.worldPosition, this.getBlockState());
+            // Paper start - Prevent TileEntity and Entity crashes
+            BlockState block = this.getBlockState();
+            if (block != null) {
+                CrashReportCategory.populateBlockDetails(crashreportsystemdetails, this.worldPosition, block);
+            }
+            // Paper end
             CrashReportCategory.populateBlockDetails(crashreportsystemdetails, this.worldPosition, this.level.getBlockState(this.worldPosition));
         }
     }
